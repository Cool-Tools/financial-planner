@page "/Schedules"
@using FP.PWA.Components
@using Schedule =  FP.Models.Scheduling.Schedule
@using FP.Models.Enumerations
@using FP.Models.Scheduling
@using FP.Models.StaticHelpers
@using MudBlazor.Extensions
@using MudBlazor.Components
@inject IDialogService DialogService
@* @inject IDialogService Dialog *@

<MudPopover></MudPopover>

<h3>Schedule</h3>
<DataForm @ref="_dataFormDialog" Model="_schedule" IconUrl="/favicon.png" SubmitEventCallback="@HandleValidSubmit" CloseEventCallback="@DataFormDialog_OnDialogClose">
@* <DataDialog @ref="_dataDialog"> *@
        <MudForm Model="@_schedule" @ref="@_mudFormDialog" ValidationDelay="0">
            <MudDatePicker Label="Start" @bind-Date="_schedule!.StartDate" For="@(() => _schedule!.StartDate)"/>
            <hr/>
            <MudSelect @bind-Value="_schedule!.Type" Label="Select occurence" HelperText="Frequency" >@*TextChanged="@TypeChanged">*@
                @foreach (ScheduleType item in Enum.GetValues<ScheduleType>())
                {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>
            @if (_schedule!.Type != ScheduleType.Once && _schedule!.Type != ScheduleType.Custom & _schedule!.Type != ScheduleType.Monthly)
            {
                <MudNumericField Label="Every" @bind-Value="_schedule!.Every" For="@(() => _schedule!.Every)"></MudNumericField>
                <span>&nbsp;</span>
                @_schedule!.Type.ToSchedulePrompt()
            }
            @if (_schedule!.Type == ScheduleType.Weekly)
            {
                <MudSelect T="string" Label="on" MultiSelection="true" @bind-Value="value" @bind-SelectedValues="_schedule.DaysOfTheWeek" SelectAll="true">
                    @foreach (var day in _daysOfTheWeek)
                    {
                        <MudSelectItem T="string" Value="@day">@day</MudSelectItem>
                    }
                </MudSelect>
            }
            @if (_schedule!.Type == ScheduleType.Monthly)
            {
                <p>on</p>
                <MudSelect T="string" Label="Months" MultiSelection="true" @bind-Value="value" @bind-SelectedValues="_schedule!.Monthly!.MonthsOfTheYear" SelectAll="true">
                    @foreach (var month in _monthsOfTheYear)
                    {
                        <MudSelectItem T="string" Value="@month">@month</MudSelectItem>
                    }
                </MudSelect>
                <MudRadioGroup T="string" @bind-SelectedOption="monthlyType" @bind-Value="monthlyType">
                    <MudRadio T="string" Value="Days">Days</MudRadio>
                    <MudRadio T="string" Value="On">On</MudRadio>
                </MudRadioGroup>
                <p>Type = @monthlyType</p>
                <MudSelect T="string" Label="on" MultiSelection="true" @bind-Value="value" @bind-SelectedValues="_schedule!.Monthly!.DaysOfTheMonth" SelectAll="true" Disabled="@(monthlyType == "On")">
                    @foreach (var day in _daysOfTheMonth)
                    {
                        <MudSelectItem T="string" Value="@day">@day</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect T="int" Label="on" bind-Value="valueInt" bind-SelectedValues="_schedule!.Monthly!.Nth" Disabled="@(monthlyType == "Days")" MultiSelection="true">
                    <MudSelectItem T="int" Value="0">1st</MudSelectItem>
                    <MudSelectItem T="int" Value="2">2nd</MudSelectItem>
                    <MudSelectItem T="int" Value="3">3rd</MudSelectItem>
                    <MudSelectItem T="int" Value="4">4th</MudSelectItem>
                    <MudSelectItem T="int" Value="-1">Last</MudSelectItem>
                </MudSelect>
                <MudSelect T="string" Label="days of the week" MultiSelection="true" @bind-Value="value" @bind-SelectedValues="_schedule.DaysOfTheWeek" Disabled="@(monthlyType == "Days")">
                    @foreach (var day in _daysOfTheWeek)
                    {
                        <MudSelectItem T="string" Value="@day">@day</MudSelectItem>
                    }
                </MudSelect>
                @("of the month")
            }
            @if (_schedule!.Type != ScheduleType.Once)
            {
                <hr/>
                <MudGrid align-center>
                    <MudCheckBox @bind-Checked="@_hasEndDate"></MudCheckBox>
                    <MudDatePicker Disabled="@(!_hasEndDate)" Label="Expire" @bind-Date="_schedule!.EndDate" For="@(() => _schedule!.EndDate)"/>
                </MudGrid>
            }
        </MudForm>
@* </DataDialog> *@
</DataForm>

<MudButton OnClick="HandleNewSchedule">Test</MudButton>

@code {
    private Schedule? _schedule;
    private bool _hasEndDate = false;                        
    private bool _daysSelected = false;
    private bool _onSelected = false;
    private DataForm? _dataFormDialog;
    private DataDialog? _dataDialog;
    private MudForm? _mudFormDialog;
    private string monthlyType = "Days";
    private int valueInt = 2;
    private string value { get; set; } = "Nothing selected";
    private string[] _daysOfTheWeek = { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };
    private string[] _monthsOfTheYear = { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" };
    private List<string> _daysOfTheMonth = Enumerable.Range(1, 31).Select(x => x.ToString()).ToList();

    private async Task HandleNewSchedule()
    {
        _schedule = new Schedule() { StartDate = DateTime.Today, Monthly = new MonthlySchedule()};
        _daysOfTheMonth.Add("Last");
        StateHasChanged();
        // var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        // var parameters = new DialogParameters();
        // parameters.Add("ChildContent", _dataDialog?.ChildContent);
        // await DialogService.ShowAsync<DataDialog>("Edit this schedule", parameters, options);
        await _dataFormDialog!.Show(false);
    }
    
    // private async Task<IEnumerable<string>> Search1(string value)
    // {
    // // In real life use an asynchronous function for fetching data from an api.
    //     await Task.Delay(5);
    //
    // // if text is null or empty, show complete list
    //     if (string.IsNullOrEmpty(value))
    //         return Enum.GetNames<ScheduleType>().ToList();   // ScheduleType.GetValuesAsUnderlyingType<ScheduleType>().ToList<ScheduleType>();
    //     return _types.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    // }

    private async void DataFormDialog_OnDialogClose()
    {
    }

    private Task HandleValidSubmit()
    {
        throw new NotImplementedException();
    }

    private void TypeChanged(string arg)
    {
        // _dataDialog?.RefreshDialog();
        // StateHasChanged();
    // throw new NotImplementedException();
    }

}