@page "/Schedules"
@using FP.PWA.Components
@using Schedule =  FP.Models.Scheduling.Schedule
@using FP.Models.Enumerations
@using MudBlazor.Extensions
@using MudBlazor.Components

<MudPopover></MudPopover>

<h3>Schedule</h3>
<DataForm @ref="_dataFormDialog" Model="_schedule" IconUrl="/favicon.png" SubmitEventCallback="@HandleValidSubmit" CloseEventCallback="@DataFormDialog_OnDialogClose">
    @* <MudTextField Label="Date" @bind-Value="_schedule!.Date" For="@(() => _schedule!.Date)"></MudTextField> *@
    @* <MudAutocomplete T="string"  Label="Repeats" @bind-Value="_scheduleType" SearchFunc="@Search1" For="@(() => _scheduleType)"></MudAutocomplete> *@
    <MudDatePicker Label="Start Date" @bind-Date="_schedule!.Date" For="@(() => _schedule!.Date)" />
    <MudSelect @bind-Value="_schedule!.Type" Label="Select occurence" HelperText="Frequency">
        @foreach (ScheduleType item in Enum.GetValues<ScheduleType>())
        {
            <MudSelectItem Value="@item">@item</MudSelectItem>
        }
    </MudSelect>
    <MudNumericField Label="Every" @bind-Value="_schedule!.Every" For="@(() => _schedule!.Every)"></MudNumericField>
    @if (_schedule!.Type == ScheduleType.Weekly || _schedule!.Type == ScheduleType.Monthly)
    {
        <p>Weekly / Monthly</p>
        <MudSelect T="string" Label="Days of the week" MultiSelection="true" @bind-Value="value" @bind-SelectedValues="_schedule.DaysOfWeek" SelectAll="true">
            @foreach (var day in _daysOfTheWeek)
            {
                <MudSelectItem T="string" Value="@day">@day</MudSelectItem>
            }
        </MudSelect>
    }
</DataForm>

<MudButton OnClick="HandleNewSchedule">Test</MudButton>

@code {
    private Schedule? _schedule;
    private DataForm? _dataFormDialog;
    private string value { get; set; } = "Nothing selected";
    private string[] _daysOfTheWeek = { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };
    // private string _scheduleType
    // {
    //     get { return _schedule.Type.ToString(); }
    //     set { _schedule.Type = Enum.Parse<ScheduleType>(value); }
    // }

    // private string[] _types = Enum.GetNames<ScheduleType>(); 
    private async Task HandleNewSchedule()
    {
        _schedule = new Schedule() { Date = DateTime.Today };
        StateHasChanged();
        await _dataFormDialog!.Show(false);
    }
    
    // private async Task<IEnumerable<string>> Search1(string value)
    // {
    // // In real life use an asynchronous function for fetching data from an api.
    //     await Task.Delay(5);
    //
    // // if text is null or empty, show complete list
    //     if (string.IsNullOrEmpty(value))
    //         return Enum.GetNames<ScheduleType>().ToList();   // ScheduleType.GetValuesAsUnderlyingType<ScheduleType>().ToList<ScheduleType>();
    //     return _types.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    // }

    private async void DataFormDialog_OnDialogClose()
    {
    }

    private Task HandleValidSubmit()
    {
        throw new NotImplementedException();
    }

}